// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quality2.Database;

#nullable disable

namespace Quality2.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231110130903_NewFieldsInOrder")]
    partial class NewFieldsInOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Quality2.Database.ExtruderDto", b =>
                {
                    b.Property<int>("ExtruderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExtruderId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ExtruderId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Extruders");
                });

            modelBuilder.Entity("Quality2.Database.FilmDto", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FilmId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Density")
                        .HasColumnType("double precision");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Thickness")
                        .HasColumnType("integer");

                    b.HasKey("FilmId");

                    b.HasIndex("Mark", "Thickness", "Color")
                        .IsUnique();

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Quality2.Database.OrderQualityDto", b =>
                {
                    b.Property<int>("OrderQualityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderQualityId"));

                    b.Property<int>("BrigadeNumber")
                        .HasColumnType("integer");

                    b.Property<double>("CoefficientOfFrictionD")
                        .HasColumnType("double precision");

                    b.Property<double>("CoefficientOfFrictionS")
                        .HasColumnType("double precision");

                    b.Property<int>("CoronaTreatment")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Customer")
                        .HasColumnType("text");

                    b.Property<int>("ElongationAtBreakMD")
                        .HasColumnType("integer");

                    b.Property<int>("ElongationAtBreakTD")
                        .HasColumnType("integer");

                    b.Property<int>("ExtruderId")
                        .HasColumnType("integer");

                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int>("InspectorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsInspected")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsQualityMatches")
                        .HasColumnType("boolean");

                    b.Property<int>("LightTransmission")
                        .HasColumnType("integer");

                    b.Property<int>("MaxThickness")
                        .HasColumnType("integer");

                    b.Property<int>("MinThickness")
                        .HasColumnType("integer");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ProductionDate")
                        .HasColumnType("date");

                    b.Property<int>("RollNumber")
                        .HasColumnType("integer");

                    b.Property<int>("StandartQualityTitleId")
                        .HasColumnType("integer");

                    b.Property<double>("TensileStrengthMD")
                        .HasColumnType("double precision");

                    b.Property<double>("TensileStrengthTD")
                        .HasColumnType("double precision");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("OrderQualityId");

                    b.HasIndex("ExtruderId");

                    b.HasIndex("FilmId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("StandartQualityTitleId");

                    b.ToTable("OrdersQuality");
                });

            modelBuilder.Entity("Quality2.Database.RoleDto", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Quality2.Database.StandartQualityFilmDto", b =>
                {
                    b.Property<int>("StandartQualityFilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StandartQualityFilmId"));

                    b.Property<double>("CoefficientOfFrictionD")
                        .HasColumnType("double precision");

                    b.Property<double>("CoefficientOfFrictionS")
                        .HasColumnType("double precision");

                    b.Property<int>("CoronaTreatment")
                        .HasColumnType("integer");

                    b.Property<int>("ElongationAtBreakMD")
                        .HasColumnType("integer");

                    b.Property<int>("ElongationAtBreakTD")
                        .HasColumnType("integer");

                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int?>("LightTransmission")
                        .HasColumnType("integer");

                    b.Property<int>("StandartQualityTitleId")
                        .HasColumnType("integer");

                    b.Property<double>("TensileStrengthMD")
                        .HasColumnType("double precision");

                    b.Property<double>("TensileStrengthTD")
                        .HasColumnType("double precision");

                    b.Property<double>("ThicknessVariation")
                        .HasColumnType("double precision");

                    b.HasKey("StandartQualityFilmId");

                    b.HasIndex("StandartQualityTitleId");

                    b.HasIndex("FilmId", "StandartQualityTitleId")
                        .IsUnique();

                    b.ToTable("StandartQualityFilms");
                });

            modelBuilder.Entity("Quality2.Database.StandartQualityTitleDto", b =>
                {
                    b.Property<int>("StandartQualityTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StandartQualityTitleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StandartQualityTitleId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("StandartQualityTitles");
                });

            modelBuilder.Entity("Quality2.Database.UserDto", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleDtoUserDto", b =>
                {
                    b.Property<int>("RolesRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("integer");

                    b.HasKey("RolesRoleId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("RoleDtoUserDto");
                });

            modelBuilder.Entity("Quality2.Database.OrderQualityDto", b =>
                {
                    b.HasOne("Quality2.Database.ExtruderDto", "Extruder")
                        .WithMany()
                        .HasForeignKey("ExtruderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quality2.Database.FilmDto", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quality2.Database.UserDto", "User")
                        .WithMany()
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quality2.Database.StandartQualityTitleDto", "StandartQualityTitle")
                        .WithMany()
                        .HasForeignKey("StandartQualityTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Extruder");

                    b.Navigation("Film");

                    b.Navigation("StandartQualityTitle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quality2.Database.StandartQualityFilmDto", b =>
                {
                    b.HasOne("Quality2.Database.FilmDto", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quality2.Database.StandartQualityTitleDto", "StandartQualityTitle")
                        .WithMany()
                        .HasForeignKey("StandartQualityTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("StandartQualityTitle");
                });

            modelBuilder.Entity("RoleDtoUserDto", b =>
                {
                    b.HasOne("Quality2.Database.RoleDto", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quality2.Database.UserDto", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
